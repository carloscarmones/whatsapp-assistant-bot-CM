from flask import Flask, request, jsonify
import requests
import os
import time

app = Flask(__name__)

# Variáveis de ambiente (Render)
openai_key = os.environ.get("CHAVE-OPENAI-CA")
assistant_id = os.environ.get("ID_ASSISTENTE")
whatsapp_token = os.environ.get("WHATSAPP_TOKEN")
numero_telefone_id = os.environ.get("ID_NUMERO_TLFONE")

# Enviar mensagem para o WhatsApp
def enviar_mensagem(mensagem, numero):
    url = f"https://graph.facebook.com/v18.0/{numero_telefone_id}/messages"
    headers = {
        "Authorization": f"Bearer {whatsapp_token}",
        "Content-Type": "application/json"
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": numero,
        "type": "text",
        "text": {"body": mensagem}
    }

    response = requests.post(url, headers=headers, json=payload)
    print("Enviando resposta:", response.status_code, response.text)

# Enviar pergunta para o assistente OpenAI
def gerar_resposta(pergunta):
    headers = {
        "Authorization": f"Bearer {openai_key}",
        "Content-Type": "application/json",
        "OpenAI-Beta": "assistants=v2"
    }

    # Criar um thread
    thread_res = requests.post("https://api.openai.com/v1/threads", headers=headers)
    thread_id = thread_res.json()["id"]

    # Enviar mensagem para o thread
    requests.post(
        f"https://api.openai.com/v1/threads/{thread_id}/messages",
        headers=headers,
        json={"role": "user", "content": pergunta}
    )

    # Iniciar execução com o assistente
    run_res = requests.post(
        f"https://api.openai.com/v1/threads/{thread_id}/runs",
        headers=headers,
        json={"assistant_id": assistant_id}
    )
    run_id = run_res.json()["id"]

    # Aguardar conclusão da resposta
    while True:
        status_res = requests.get(
            f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
            headers=headers
        )
        status = status_res.json()["status"]
        if status == "completed":
            break
        elif status == "failed":
            return "Erro ao gerar resposta com a IA."
        time.sleep(1)

    # Obter resposta
    messages_res = requests.get(
        f"https://api.openai.com/v1/threads/{thread_id}/messages",
        headers=headers
    )
    messages = messages_res.json()["data"]
    resposta = messages[0]["content"][0]["text"]["value"]
    return resposta

# Rota do webhook da Meta
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()

    try:
        mensagem = data["entry"][0]["changes"][0]["value"]["messages"][0]["text"]["body"]
        numero = data["entry"][0]["changes"][0]["value"]["messages"][0]["from"]

        print("Mensagem recebida:", mensagem)
        resposta = gerar_resposta(mensagem)
        enviar_mensagem(resposta, numero)

        return jsonify({"status": "mensagem processada com sucesso"}), 200

    except Exception as e:
        print("Erro ao processar:", str(e))
        return jsonify({"status": "erro", "mensagem": str(e)}), 500

# Rota de verificação do webhook (GET)
@app.route("/webhook", methods=["GET"])
def verificar():
    verify_token = "carlos_carmones_token"  # Esse tem que ser o mesmo que você configurou na Meta
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")

    if token == verify_token:
        return challenge
    return "Token inválido", 403

if __name__ == "__main__":
    app.run(debug=True)
